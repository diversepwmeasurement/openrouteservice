jobs:
  build-graph:
    environment: ${{ inputs.environment }}
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Checkout repository
      uses: actions/checkout@v4
      with:
        clean: false
        fetch-depth: 0
    - continue-on-error: true
      id: needs_clone
      name: Check if config repository needs to be cloned
      run: "# Check if the folder ors-config-repo exists\nif [ ! -d \"ors-config-repo\"\
        \ ]; then\n  export NEEDS_CLONE=1\nelse\n  # Get the current git remote URL\n\
        \  remote_url=$(git -C ors-config-repo remote get-url origin)\n\n  # Compare\
        \ the remote URL with the expected value\n  expected_url=\"https://oauth2:${{\
        \ secrets.CONFIG_REPO_TOKEN }}@${{ secrets.CONFIG_REPO }}.git\"\n  if [ \"\
        $remote_url\" != \"$expected_url\" ]; then\n   export NEEDS_CLONE=1\n  else\n\
        \   export NEEDS_CLONE=0\n  fi\nfi\necho \"NEEDS_CLONE=$NEEDS_CLONE\" >> \"\
        $GITHUB_OUTPUT\"\n"
    - continue-on-error: true
      if: ${{ steps.needs_clone.outputs.NEEDS_CLONE == 1 }}
      name: Clone config repository
      run: 'rm -rf ors-config-repo

        git clone https://oauth2:${{ secrets.CONFIG_REPO_TOKEN }}@${{ secrets.CONFIG_REPO
        }}.git ors-config-repo

        '
    - continue-on-error: true
      if: ${{ steps.needs_clone.outputs.NEEDS_CLONE == 0 }}
      name: Pull config repository changes
      run: 'git -C ors-config-repo pull https://oauth2:${{ secrets.CONFIG_REPO_TOKEN
        }}@${{ secrets.CONFIG_REPO }}.git

        '
    - continue-on-error: true
      name: Create env directory and folders
      run: 'mkdir -p $(pwd)/envs/${{ secrets.ENV_NAME }} && cd $(pwd)/envs/${{ secrets.ENV_NAME
        }}

        mkdir -p $(pwd)/graphs $(pwd)/conf $(pwd)/elevation_cache $(pwd)/logs/ors
        $(pwd)/logs/tomcat

        '
    - continue-on-error: true
      id: md5
      name: Download .md5 file for pbf
      run: "cd envs/${{ secrets.ENV_NAME }}\nURL=\"${{ inputs.osm_file_url }}\"\n\
        PBF_NAME=$(basename \"${URL}\")\necho \"PBF_NAME=${PBF_NAME}\" >> $GITHUB_OUTPUT\n\
        MD5_URL=\"${URL}.md5\"\nMD5_FILENAME=$(basename \"${MD5_URL}\")\nwget ${MD5_URL}\
        \ -O ${MD5_FILENAME}\nif md5sum --status -c \"${MD5_FILENAME}\"; then\n  echo\
        \ \"CHANGED=false\" >> $GITHUB_OUTPUT\n  echo \"PBF file is up to date.\"\n\
        else\n  echo \"CHANGED=true\" >> $GITHUB_OUTPUT\nfi\n"
    - continue-on-error: true
      id: download_pbf
      if: steps.md5.outputs.CHANGED == 'true'
      name: Download pbf
      run: 'URL="${{ inputs.osm_file_url }}"

        wget ${URL} -O envs/${{ secrets.ENV_NAME }}/${{ steps.md5.outputs.PBF_NAME
        }}

        '
    - continue-on-error: true
      name: Build docker image
      run: docker build . -t ors-local
    - continue-on-error: true
      name: Start docker container from local image
      run: 'docker run -dt -u "0:0" \

        --name ors-graph-build-${{ secrets.ENV_NAME }} \

        -p 8080:8080 \

        -v $PWD/ors-config-repo/${{ secrets.CONFIG_FOLDER_PATH }}:/home/ors/ors-conf
        \

        -v $PWD/envs/${{ secrets.ENV_NAME }}/graphs:/home/ors/ors-core/data/graphs
        \

        -e "GRAPHS_FOLDER=/home/ors/ors-core/data/graphs" \

        -v $PWD/envs/${{ secrets.ENV_NAME }}/elevation_cache:/home/ors/ors-core/data/elevation_cache
        \

        -e "ELEVATION_CACHE_FOLDER=/home/ors/ors-core/data/elevation_cache" \

        -v $PWD/envs/${{ secrets.ENV_NAME }}/${{ steps.md5.outputs.PBF_NAME }}:/home/ors/ors-core/data/osm_file.pbf
        \

        -e "PBF_FILE_PATH=/home/ors/ors-core/data/osm_file.pbf" \

        -v $PWD/envs/${{ secrets.ENV_NAME }}/logs/ors:/home/ors/ors-core/logs/ors
        \

        -v $PWD/envs/${{ secrets.ENV_NAME }}/logs/tomcat:/home/ors/tomcat/logs \

        -v $PWD/ors-config-repo/${{ secrets.EXTRAS_FOLDER_PATH }}:/opt/ors/extras
        \

        -e "LOGS_FOLDER=/home/ors/ors-core/logs/ors" \

        -e "JAVA_OPTS=-Dors_config=/home/ors/ors-conf/ors-config.${{ secrets.ENV_NAME
        }}.json -Djava.awt.headless=true -server -XX:TargetSurvivorRatio=75 -XX:SurvivorRatio=64
        -XX:MaxTenuringThreshold=3 -XX:+UseG1GC -XX:+ScavengeBeforeFullGC -XX:ParallelGCThreads=4
        -Xms1g -Xmx2g" \

        -e "CATALINA_OPTS=-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=9001
        -Dcom.sun.management.jmxremote.rmi.port=9001 -Dcom.sun.management.jmxremote.authenticate=false
        -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=localhost"
        \

        ors-local

        '
    - continue-on-error: true
      name: Wait 2 days for healthcheck, report every 15 Minutes
      run: ./.github/utils/url_check.sh 127.0.0.1 8080 /ors/v2/health 200 172800 10
        90
    - continue-on-error: true
      name: Restart docker to check for correcty built graphs
      run: 'docker stop ors-graph-build-${{secrets.ENV_NAME }}

        docker start ors-graph-build-${{secrets.ENV_NAME }}

        '
    - continue-on-error: true
      name: Wait 5 minutes for healthcheck, report every 30 seconds
      run: ./.github/utils/url_check.sh 127.0.0.1 8080 /ors/v2/health 200 300 10 3
    - continue-on-error: true
      name: change permission of files in container
      run: 'docker exec -t ors-graph-build-${{secrets.ENV_NAME }} chown -R ${UID}:${GID}
        /home/ors/ors-core/data/graphs

        docker exec -t ors-graph-build-${{secrets.ENV_NAME }} chown -R ${UID}:${GID}
        /home/ors/ors-core/logs

        docker exec -t ors-graph-build-${{secrets.ENV_NAME }} chown -R ${UID}:${GID}
        /home/ors/tomcat/logs

        docker exec -t ors-graph-build-${{secrets.ENV_NAME }} chown -R ${UID}:${GID}
        /home/ors/tomcat/webapps/ors.war

        '
    - continue-on-error: true
      name: Prepare graph, logs, war file and config for export
      run: 'cd $(pwd)/envs/${{ secrets.ENV_NAME }}

        tar -cf - graphs/ | xz -e -9 -T 0 -c > "graphs.tar.gz"

        tar -cf - logs/ | xz -e -9 -T 0 -c > "logs.tar.gz"

        sha256sum graphs.tar.gz > graphs.tar.gz.checksum

        sha256sum logs.tar.gz > logs.tar.gz.checksum


        # Extract war file from container

        docker cp ors-graph-build-${{ secrets.ENV_NAME }}:/home/ors/tomcat/webapps/ors.war
        .


        cp ../../ors-config-repo/${{ secrets.CONFIG_FOLDER_PATH }}/ors-config.${{
        secrets.ENV_NAME }}.json .

        sha256sum ors-config.${{ secrets.ENV_NAME }}.json > ors-config.${{ secrets.ENV_NAME
        }}.json.checksum

        '
    - continue-on-error: true
      if: ${{ inputs.config_in_war == 'true' }}
      name: update ors-config.json in war file
      run: 'cd $(pwd)/envs/${{ secrets.ENV_NAME }}

        mkdir -p WEB-INF/classes/

        cp ors-config.${{ secrets.ENV_NAME }}.json WEB-INF/classes/ors-config.json

        jar uf ors.war WEB-INF/classes/ors-config.json

        rm -rf WEB-INF

        sha256sum ors.war > ors.war.checksum

        '
    - continue-on-error: true
      if: ${{ inputs.config_in_war == 'false' }}
      name: remove config from war file
      run: 'cd $(pwd)/envs/${{ secrets.ENV_NAME }}

        zip -d ors.war WEB-INF/classes/ors-config.json

        zip -d ors.war WEB-INF/classes/ors-config-sample.json

        sha256sum ors.war > ors.war.checksum

        '
    - continue-on-error: true
      if: always()
      name: Remove docker container
      run: 'docker stop ors-graph-build-${{ secrets.ENV_NAME }}

        docker rm -f ors-graph-build-${{ secrets.ENV_NAME }}; echo $?

        '
name: Build graphs
on:
  repository_dispatch:
    types: trigger-ga___build_graph.yml
